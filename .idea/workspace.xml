<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="74f6ae07-97db-403a-80ed-49272be10cad" name="Changes" comment="feat: implement Telegram bot integration with existing RAG system&#10;&#10;- Implemented complete Telegram bot module using aiogram 3.x with Router and Dispatcher architecture&#10;- Created access control middleware to restrict bot usage to whitelisted user IDs from configuration&#10;- Developed message handlers for /start, /help commands and RAG-powered question processing&#10;- Integrated existing RAG services (VectorRepository, EmbeddingService, RAGService) with Telegram handlers&#10;- Extended configuration with telegram_bot_token, allowed_user_ids, similarity_threshold (0.5) and rag_top_k (5)&#10;- Modified main.py to support dual execution mode: console testing and Telegram bot polling&#10;- Structured modular architecture with separate handlers and middlewares for maintainability">
      <change beforePath="$PROJECT_DIR$/app/core/config.py" beforeDir="false" afterPath="$PROJECT_DIR$/app/core/config.py" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/core/logger.py" beforeDir="false" afterPath="$PROJECT_DIR$/app/core/logger.py" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/telegram/bot.py" beforeDir="false" afterPath="$PROJECT_DIR$/app/telegram/bot.py" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/vector_db/reader.py" beforeDir="false" afterPath="$PROJECT_DIR$/app/vector_db/reader.py" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/vector_db/repositories/vector_repository.py" beforeDir="false" afterPath="$PROJECT_DIR$/app/vector_db/repositories/vector_repository.py" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Python Script" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 3
}</component>
  <component name="ProjectId" id="32EOR3siEhUBMHCLVsRWYXg67nw" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Docker.docker-compose.yaml.postgres-ai: Compose Deployment.executor": "Run",
    "Docker.docker-compose.yaml: Compose Deployment.executor": "Run",
    "ModuleVcsDetector.initialDetectionPerformed": "true",
    "Python.config.executor": "Run",
    "Python.main.executor": "Run",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.TerminalTabsStorage.copyFrom.TerminalArrangementManager.252": "true",
    "RunOnceActivity.git.unshallow": "true",
    "git-widget-placeholder": "master",
    "last_opened_file_path": "C:/Users/Dima/PycharmProjects/universal_ai_assistant/documents",
    "settings.editor.selected.configurable": "org.jetbrains.plugins.github.ui.GithubSettingsConfigurable"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\Dima\PycharmProjects\universal_ai_assistant\documents" />
      <recent name="C:\Users\Dima\PycharmProjects\universal_ai_assistant" />
    </key>
  </component>
  <component name="RunManager" selected="Python.main">
    <configuration name="main" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
      <module name="universal_ai_assistant" />
      <option name="ENV_FILES" value="" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/main.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
      <option name="REDIRECT_INPUT" value="false" />
      <option name="INPUT_FILE" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="docker-deploy" factoryName="docker-compose.yml" temporary="true">
      <deployment type="docker-compose.yml" />
      <method v="2" />
    </configuration>
    <configuration name="docker-compose.yaml: Compose Deployment" type="docker-deploy" factoryName="docker-compose.yml" temporary="true" server-name="Docker">
      <deployment type="docker-compose.yml">
        <settings>
          <option name="sourceFilePath" value="docker-compose.yaml" />
        </settings>
      </deployment>
      <method v="2" />
    </configuration>
    <configuration name="docker-compose.yaml.postgres-ai: Compose Deployment" type="docker-deploy" factoryName="docker-compose.yml" temporary="true" server-name="Docker">
      <deployment type="docker-compose.yml">
        <settings>
          <option name="services">
            <list>
              <option value="postgres-ai" />
            </list>
          </option>
          <option name="sourceFilePath" value="docker-compose.yaml" />
        </settings>
      </deployment>
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Python.main" />
        <item itemvalue="Docker.docker-compose.yaml: Compose Deployment" />
        <item itemvalue="Docker.docker-compose.yaml.postgres-ai: Compose Deployment" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-python-sdk-ce6832f46686-7b97d883f26b-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-252.25557.178" />
      </set>
    </attachedChunks>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="74f6ae07-97db-403a-80ed-49272be10cad" name="Changes" comment="" />
      <created>1756982253837</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1756982253837</updated>
    </task>
    <task id="LOCAL-00001" summary="feat: implement universal AI assistant with RAG system using Gemini and PGVector&#10;&#10;- Built modular Python application with pydantic-settings configuration management and SOLID architecture principles&#10;- Integrated Google Gemini API for chat functionality with temperature control and comprehensive error handling&#10;- Implemented RAG (Retrieval-Augmented Generation) system using Ollama embeddings and PGVector database for semantic search&#10;- Created document processing pipeline supporting PDF and TXT files with automatic chunking strategy&#10;- Set up PostgreSQL with pgvector extension using Docker Compose for vector storage and similarity search operations&#10;- Developed CLI interface with commands for bulk document loading and RAG-enabled querying functionality">
      <option name="closed" value="true" />
      <created>1757079440521</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1757079440521</updated>
    </task>
    <task id="LOCAL-00002" summary="refactor: complete architecture refactoring from monolithic to service-oriented design&#10;&#10;- Separated VectorStore into VectorRepository (PostgreSQL operations) and EmbeddingService (Ollama integration)&#10;- Created RAGService for coordinating document processing and context search with automatic initialization&#10;- Refactored GeminiClient to remove circular imports and added configurable system prompts for RAG-only mode&#10;- Added proper separation of concerns: moved database initialization to repository layer&#10;- Implemented automatic document loading from configurable folder path via environment variables&#10;- Enhanced RAG context logging with similarity scores and source file tracking&#10;- Cleaned up main.py from 108 lines of mixed responsibilities to minimal entry point">
      <option name="closed" value="true" />
      <created>1757084406604</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1757084406604</updated>
    </task>
    <task id="LOCAL-00003" summary="feat: implement Telegram bot integration with existing RAG system&#10;&#10;- Implemented complete Telegram bot module using aiogram 3.x with Router and Dispatcher architecture&#10;- Created access control middleware to restrict bot usage to whitelisted user IDs from configuration&#10;- Developed message handlers for /start, /help commands and RAG-powered question processing&#10;- Integrated existing RAG services (VectorRepository, EmbeddingService, RAGService) with Telegram handlers&#10;- Extended configuration with telegram_bot_token, allowed_user_ids, similarity_threshold (0.5) and rag_top_k (5)&#10;- Modified main.py to support dual execution mode: console testing and Telegram bot polling&#10;- Structured modular architecture with separate handlers and middlewares for maintainability">
      <option name="closed" value="true" />
      <created>1757089019225</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1757089019225</updated>
    </task>
    <option name="localTasksCounter" value="4" />
    <servers />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="feat: implement universal AI assistant with RAG system using Gemini and PGVector&#10;&#10;- Built modular Python application with pydantic-settings configuration management and SOLID architecture principles&#10;- Integrated Google Gemini API for chat functionality with temperature control and comprehensive error handling&#10;- Implemented RAG (Retrieval-Augmented Generation) system using Ollama embeddings and PGVector database for semantic search&#10;- Created document processing pipeline supporting PDF and TXT files with automatic chunking strategy&#10;- Set up PostgreSQL with pgvector extension using Docker Compose for vector storage and similarity search operations&#10;- Developed CLI interface with commands for bulk document loading and RAG-enabled querying functionality" />
    <MESSAGE value="refactor: complete architecture refactoring from monolithic to service-oriented design&#10;&#10;- Separated VectorStore into VectorRepository (PostgreSQL operations) and EmbeddingService (Ollama integration)&#10;- Created RAGService for coordinating document processing and context search with automatic initialization&#10;- Refactored GeminiClient to remove circular imports and added configurable system prompts for RAG-only mode&#10;- Added proper separation of concerns: moved database initialization to repository layer&#10;- Implemented automatic document loading from configurable folder path via environment variables&#10;- Enhanced RAG context logging with similarity scores and source file tracking&#10;- Cleaned up main.py from 108 lines of mixed responsibilities to minimal entry point" />
    <MESSAGE value="feat: implement Telegram bot integration with existing RAG system&#10;&#10;- Implemented complete Telegram bot module using aiogram 3.x with Router and Dispatcher architecture&#10;- Created access control middleware to restrict bot usage to whitelisted user IDs from configuration&#10;- Developed message handlers for /start, /help commands and RAG-powered question processing&#10;- Integrated existing RAG services (VectorRepository, EmbeddingService, RAGService) with Telegram handlers&#10;- Extended configuration with telegram_bot_token, allowed_user_ids, similarity_threshold (0.5) and rag_top_k (5)&#10;- Modified main.py to support dual execution mode: console testing and Telegram bot polling&#10;- Structured modular architecture with separate handlers and middlewares for maintainability" />
    <option name="LAST_COMMIT_MESSAGE" value="feat: implement Telegram bot integration with existing RAG system&#10;&#10;- Implemented complete Telegram bot module using aiogram 3.x with Router and Dispatcher architecture&#10;- Created access control middleware to restrict bot usage to whitelisted user IDs from configuration&#10;- Developed message handlers for /start, /help commands and RAG-powered question processing&#10;- Integrated existing RAG services (VectorRepository, EmbeddingService, RAGService) with Telegram handlers&#10;- Extended configuration with telegram_bot_token, allowed_user_ids, similarity_threshold (0.5) and rag_top_k (5)&#10;- Modified main.py to support dual execution mode: console testing and Telegram bot polling&#10;- Structured modular architecture with separate handlers and middlewares for maintainability" />
  </component>
</project>